# Python program – Dynamic Programming implementation of 0-1 Knapsack problem

def knapSack(W, weight, value, n):
    K = [[0 for x in range(W+1)] for x in range(n+1)]

    # Build table K[][] in bottom up manner
    for i in range(n+1):
        for w in range(W+1):
            if i==0 or w==0:
                K[i][w] = 0
                elif weight[i-1] <= w:
                    K[i][w] = max(value[i-1] + K[i-1][w-weight[i-1]], K[i-1][w])
                    else:
                        K[i][w] = K[i-1][w]

                        return K[n][W]

                    value = [100, 50, 150]
                    weight = [20, 10, 30]
                    W = 50
                    n = len(val)
print (“Maximum capacity : “,knapSack(W , weight , value , n) )